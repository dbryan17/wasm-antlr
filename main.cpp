// https://tomassetti.me/listeners-and-visitors/
// https://tomassetti.me/getting-started-antlr-cpp/

// not including the runtime - is in demo, difference with the ex from gtihub, probablty needed
// for wasm - understand this more

#include <iostream>
#include <stdio.h>
#include "FractalParser.h"
#include "FractalLexer.h"
#include "FractalBaseVisitor.h" 
#include "FractalVisitor.h"
#include "antlr4-runtime.h"
#include "MyVisitor.h"
#include <complex.h>
// #include "libantlr4-runtime.a"



// this if thing in ex makes it so it runs the emscripten way if emscripten is defined?,
// then the else block runs the lexer+parser in the more normal way that is shown in the examples online 
#ifdef __EMSCRIPTEN__

// #include <emscripten.h>

using namespace std;
using namespace antlr4;

int main(int argc, const char* argv[]) { return 0; }

// function for cwrap here 
extern "C" {

  void run_script(const char *stream) {

    // below is how they are doing it in online example because that is the more up to date
    // version of antlr, slightly different than how they are doing it in wasm ex, but the 
    // boilerplate that is being generated by antlr is the one from the most recent version
    // might be weird though because online they are inlcuding the runtime that we don't have
    // gonna have to try both I'm assuming


    

    // turn the input into antlr format 
    antlr4::ANTLRInputStream input(stream);
    // antlr4::ANTLRInputStream input_stream(input);

    // creaate lexer, get tokens, parse
    FractalLexer lexer(&input);
    antlr4::CommonTokenStream tokens(&lexer);
    FractalParser parser(&tokens);

    // call script method - this scriptContext contains method to access the text caputred by the rule
    FractalParser::ScriptContext* tree = parser.script();

    // variable to set critical point to - FOR DYN SPACE ONLY - have to figure this out later
    std::string crit = "z";
    // variable to set screen point to 
    std::string screen = "c";
    std::complex<double> crit_point(0.,0.);
    // visitor 
    myVisitor visitor(64, 4., 0.1, crit, screen, crit_point); 




    

    // do loop here 
    int iterations = visitor.evalPoint(std::complex<double>(1.5,1.5), tree);
    

    // visitor.visitScript(tree);
    // fractal.//
    printf("testing %d\n", iterations);




  }
}

  #else

  int main(int, const char **) { return 0; }

  


#endif